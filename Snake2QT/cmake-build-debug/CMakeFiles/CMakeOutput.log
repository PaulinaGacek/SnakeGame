The system is: Windows - 10.0.19042 - AMD64
Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe 
Build flags: 
Id flags:  

The output was:
0
Microsoft (R) C/C++ wersja kompilatora optymalizującego 19.27.29112 dla x64
Copyright (C) Microsoft Corporation. Wszystkie prawa zastrzeżone.

CMakeCCompilerId.c
Microsoft (R) Incremental Linker Version 14.27.29112.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCCompilerId.exe 
CMakeCCompilerId.obj 


Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CMakeCCompilerId.exe"

Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "CMakeCCompilerId.obj"

The C compiler identification is MSVC, found in "C:/Users/pauli/CLionProjects/Snake2QT/cmake-build-debug/CMakeFiles/3.17.5/CompilerIdC/CMakeCCompilerId.exe"

Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe 
Build flags: 
Id flags:  

The output was:
0
Microsoft (R) C/C++ wersja kompilatora optymalizującego 19.27.29112 dla x64
Copyright (C) Microsoft Corporation. Wszystkie prawa zastrzeżone.

CMakeCXXCompilerId.cpp
Microsoft (R) Incremental Linker Version 14.27.29112.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCXXCompilerId.exe 
CMakeCXXCompilerId.obj 


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.exe"

Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.obj"

The CXX compiler identification is MSVC, found in "C:/Users/pauli/CLionProjects/Snake2QT/cmake-build-debug/CMakeFiles/3.17.5/CompilerIdCXX/CMakeCXXCompilerId.exe"

Determining if the C compiler works passed with the following output:
Change Dir: C:/Users/pauli/CLionProjects/Snake2QT/cmake-build-debug/CMakeFiles/CMakeTmp

Run Build Command(s):nmake /nologo cmTC_66529\fast && 	"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\HostX64\x64\nmake.exe"  -f CMakeFiles\cmTC_66529.dir\build.make /nologo -L                  CMakeFiles\cmTC_66529.dir\build
Building C object CMakeFiles/cmTC_66529.dir/testCCompiler.c.obj
	"C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\cl.exe" @C:\Users\pauli\AppData\Local\Temp\nmA71E.tmp
testCCompiler.c
Linking C executable cmTC_66529.exe
	"C:\Program Files\JetBrains\CLion 2020.3\bin\cmake\win\bin\cmake.exe" -E vs_link_exe --intdir=CMakeFiles\cmTC_66529.dir --rc="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\rc.exe" --mt="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\mt.exe" --manifests  -- "C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\link.exe" /nologo @CMakeFiles\cmTC_66529.dir\objects1.rsp @C:\Users\pauli\AppData\Local\Temp\nmA79C.tmp



Detecting C compiler ABI info compiled with the following output:
Change Dir: C:/Users/pauli/CLionProjects/Snake2QT/cmake-build-debug/CMakeFiles/CMakeTmp

Run Build Command(s):nmake /nologo cmTC_7a598\fast && 	"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\HostX64\x64\nmake.exe"  -f CMakeFiles\cmTC_7a598.dir\build.make /nologo -L                  CMakeFiles\cmTC_7a598.dir\build
Building C object CMakeFiles/cmTC_7a598.dir/CMakeCCompilerABI.c.obj
	"C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\cl.exe" @C:\Users\pauli\AppData\Local\Temp\nmAAA8.tmp
CMakeCCompilerABI.c
Linking C executable cmTC_7a598.exe
	"C:\Program Files\JetBrains\CLion 2020.3\bin\cmake\win\bin\cmake.exe" -E vs_link_exe --intdir=CMakeFiles\cmTC_7a598.dir --rc="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\rc.exe" --mt="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\mt.exe" --manifests  -- "C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\link.exe" /nologo @CMakeFiles\cmTC_7a598.dir\objects1.rsp @C:\Users\pauli\AppData\Local\Temp\nmAB26.tmp



Determining if the CXX compiler works passed with the following output:
Change Dir: C:/Users/pauli/CLionProjects/Snake2QT/cmake-build-debug/CMakeFiles/CMakeTmp

Run Build Command(s):nmake /nologo cmTC_8616f\fast && 	"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\HostX64\x64\nmake.exe"  -f CMakeFiles\cmTC_8616f.dir\build.make /nologo -L                  CMakeFiles\cmTC_8616f.dir\build
Building CXX object CMakeFiles/cmTC_8616f.dir/testCXXCompiler.cxx.obj
	"C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\cl.exe" @C:\Users\pauli\AppData\Local\Temp\nmAE71.tmp
testCXXCompiler.cxx
Linking CXX executable cmTC_8616f.exe
	"C:\Program Files\JetBrains\CLion 2020.3\bin\cmake\win\bin\cmake.exe" -E vs_link_exe --intdir=CMakeFiles\cmTC_8616f.dir --rc="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\rc.exe" --mt="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\mt.exe" --manifests  -- "C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\link.exe" /nologo @CMakeFiles\cmTC_8616f.dir\objects1.rsp @C:\Users\pauli\AppData\Local\Temp\nmAEEF.tmp



Detecting CXX compiler ABI info compiled with the following output:
Change Dir: C:/Users/pauli/CLionProjects/Snake2QT/cmake-build-debug/CMakeFiles/CMakeTmp

Run Build Command(s):nmake /nologo cmTC_c2d41\fast && 	"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\HostX64\x64\nmake.exe"  -f CMakeFiles\cmTC_c2d41.dir\build.make /nologo -L                  CMakeFiles\cmTC_c2d41.dir\build
Building CXX object CMakeFiles/cmTC_c2d41.dir/CMakeCXXCompilerABI.cpp.obj
	"C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\cl.exe" @C:\Users\pauli\AppData\Local\Temp\nmB249.tmp
CMakeCXXCompilerABI.cpp
Linking CXX executable cmTC_c2d41.exe
	"C:\Program Files\JetBrains\CLion 2020.3\bin\cmake\win\bin\cmake.exe" -E vs_link_exe --intdir=CMakeFiles\cmTC_c2d41.dir --rc="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\rc.exe" --mt="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\mt.exe" --manifests  -- "C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\link.exe" /nologo @CMakeFiles\cmTC_c2d41.dir\objects1.rsp @C:\Users\pauli\AppData\Local\Temp\nmB2B8.tmp



Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: C:/Users/pauli/CLionProjects/Snake2QT/cmake-build-debug/CMakeFiles/CMakeTmp

Run Build Command(s):nmake /nologo cmTC_834f0\fast && 	"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\HostX64\x64\nmake.exe"  -f CMakeFiles\cmTC_834f0.dir\build.make /nologo -L                  CMakeFiles\cmTC_834f0.dir\build
Building CXX object CMakeFiles/cmTC_834f0.dir/src.cxx.obj
	"C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\cl.exe" @C:\Users\pauli\AppData\Local\Temp\nm3B5F.tmp
src.cxx
C:\Users\pauli\CLionProjects\Snake2QT\cmake-build-debug\CMakeFiles\CMakeTmp\src.cxx(17): warning C4312: "typ rzutowania": konwersja z "unsigned int" na "void *" jest większej wielkości
Linking CXX executable cmTC_834f0.exe
	"C:\Program Files\JetBrains\CLion 2020.3\bin\cmake\win\bin\cmake.exe" -E vs_link_exe --intdir=CMakeFiles\cmTC_834f0.dir --rc="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\rc.exe" --mt="C:\PROGRA~2\Windows Kits\10\bin\10.0.18362.0\x64\mt.exe" --manifests  -- "C:\PROGRA~2\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.27.29110\bin\Hostx64\x64\link.exe" /nologo @CMakeFiles\cmTC_834f0.dir\objects1.rsp @C:\Users\pauli\AppData\Local\Temp\nm3C2B.tmp


Source file was:
#include <atomic>
#include <cstdint>

void test(volatile std::atomic<std::int64_t> &a)
{
    std::int64_t v = a.load(std::memory_order_acquire);
    while (!a.compare_exchange_strong(v, v + 1,
                                      std::memory_order_acq_rel,
                                      std::memory_order_acquire)) {
        v = a.exchange(v - 1);
    }
    a.store(v + 1, std::memory_order_release);
}

int main(int, char **)
{
    void *ptr = (void*)0xffffffc0; // any random pointer
    test(*reinterpret_cast<std::atomic<std::int64_t> *>(ptr));
    return 0;
}
